{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mordant Colorful styling for command-line applications /m\u0254\u02d0(\u0279)d\u0259nt/ A substance used to set (i.e. bind) colored dyes on fabrics 1 Mordant has: Easy colorful ANSI output with automatic detection of terminal capabilities Markdown rendering directly to the terminal Widget for laying out terminal output, including lists, tables, panels, and more Support for animating any widget, like progress bars and dashboards This README documents Mordant 2.0, which is in beta. You can read the docs for Mordant 1.0 here. \u00b6 Usage \u00b6 Create a Terminal instance, and import any enum entries you want from TextColors and TextStyles . The println function on your Terminal will detect your current terminal capabilities and automatically downsample ANSI codes if necessary. import com.github.ajalt.mordant.rendering.TextColors.* import com.github.ajalt.mordant.rendering.TextStyles.* val t = Terminal () t . println ( red ( \"This text will be red on terminals that support color\" )) Multiple styles \u00b6 import com.github.ajalt.mordant.rendering.TextColors.* val t = Terminal () t . println ( \"${red(\" red \")} ${white(\" white \")} and ${blue(\" blue \")}\" ) Foreground and background colors \u00b6 t . println (( yellow on brightGreen )( \"this is easy to read, right?\" )) Background color alone \u00b6 t . println ( \"The foreground ${brightBlue.bg(\" color will stay the \")} same\" ) Combine styles and colors \u00b6 val style = ( bold + white + underline ) t . println ( style ( \"You can save styles\" )) t . println ( style ( \"to reuse\" )) Nest styles and colors \u00b6 t . println ( white ( \"You ${(blue on yellow)(\" can $ {( black + strikethrough )( \"nest\" )} styles \")} arbitrarily\" )) True color and other color spaces \u00b6 import com.github.ajalt.mordant.rendering.TextColors.Companion.rgb t . println ( rgb ( \"#b4eeb4\" )( \"This will get downsampled on terminals that don't support truecolor\" )) Terminal color support detection \u00b6 By default, Terminal() will try to detect ANSI support in the current stdout stream. If you\u2019d like to override the detection, you can pass a specific value to the Terminal constructor. For example, to always output ANSI RGB color codes, even if stdout is currently directed to a file, you can do this: Terminal ( AnsiLevel . TRUECOLOR ) Tables \u00b6 Use the table DSL to quickly create tables. Mordant handles ANSI styles and wide characters like CJK and emoji. val t = Terminal () t . println ( table { header { row ( \"CJK\" , \"Emojis\" ) } body { row ( \"\ubaa8\u3139\ub2e8\u314c\" , \"\ud83d\ude4a\ud83d\ude49\ud83d\ude48\" ) } }) Mordant gives you lots of customization for your tables, including striped row styles, row and column spans, and different border styles. table { borderStyle = SQUARE_DOUBLE_SECTION_SEPARATOR align = RIGHT outerBorder = false column ( 0 ) { align = LEFT borders = ALL style = magenta } column ( 3 ) { borders = ALL style = magenta } header { style ( magenta , bold = true ) row ( \"\" , \"Projected Cost\" , \"Actual Cost\" , \"Difference\" ) } body { rowStyles ( blue , brightBlue ) borders = TOM_BOTTOM row ( \"Food\" , \"$400\" , \"$200\" , \"$200\" ) row ( \"Data\" , \"$100\" , \"$150\" , \"-$50\" ) row ( \"Rent\" , \"$800\" , \"$800\" , \"$0\" ) row ( \"Candles\" , \"$0\" , \"$3,600\" , \"-$3,600\" ) row ( \"Utility\" , \"$145\" , \"$150\" , \"-$5\" ) } footer { style ( bold = true ) row { cell ( \"Subtotal\" ) cell ( \"$-3,455\" ) { columnSpan = 3 } } } captionBottom ( \"Budget courtesy @dril\" , TextStyle ( dim = true )) } Markdown \u00b6 Mordant can render GitHub Flavored Markdown. Hyperlinks will even be clickable if you\u2019re on a terminal that supports it, like recent versions of iTerm or Windows Terminal. val t = Terminal () t . printMarkdown ( File ( \"README.md\" ). readText ()) Controlling the cursor \u00b6 You can show and hide the cursor, move it around, and clear parts of the screen with the cursor property on Terminal . If your terminal doesn\u2019t support cursor movements (like when output is redirected to a file) these commands are no-ops. val t = Terminal () t . cursor . move { up ( 3 ) startOfLine () clearScreenAfterCursor () } t . cursor . hide ( showOnExit = true ) Animations \u00b6 You can animate any widget like a table with Terminal.animation , or any regular string with Terminal.textAnimation . val t = Terminal() val a = t.textAnimation<Int> { frame -> (1..50).joinToString(\"\") { val hue = (frame + it) * 3 % 360 t.colors.hsv(hue, 100, 100)(\"\u2501\") } } t.cursor.hide(showOnExit = true) repeat(120) { a.update(it) Thread.sleep(25) } Progress bars \u00b6 You can create customizable progress bars that automatically compute speed and time remaining. val t = Terminal () val progress = t . progressAnimation { text ( \"my-file.iso\" ) percentage () progressBar () completed () speed ( \"B/s\" ) timeRemaining () } The progressAnimation builder is currently JVM-only. On other platforms, you can still use t.animation { progressLayout { ... } } which will render the same widget, you\u2019ll just need to call progress.update manually. Call progress.start to animate the progress, and progress.update or progress.advance as your task completes. Installation \u00b6 Mordant is distributed through Maven Central. dependencies { implementation ( \"com.github.ajalt.mordant:mordant:2.0.0-beta2\" ) } In version 2.0, the maven coordinates changed. Make sure you\u2019re using the new coordinates if you\u2019re updating from an older version. \u00b6 If you\u2019re using Maven instead of Gradle, use <artifactId>mordant-jvm</artifactId> \u00b6","title":"Getting Started"},{"location":"#this-readme-documents-mordant-20-which-is-in-beta-you-can-read-the-docs-for-mordant-10-here","text":"","title":"This README documents Mordant 2.0, which is in beta. You can read the docs for Mordant 1.0 here."},{"location":"#usage","text":"Create a Terminal instance, and import any enum entries you want from TextColors and TextStyles . The println function on your Terminal will detect your current terminal capabilities and automatically downsample ANSI codes if necessary. import com.github.ajalt.mordant.rendering.TextColors.* import com.github.ajalt.mordant.rendering.TextStyles.* val t = Terminal () t . println ( red ( \"This text will be red on terminals that support color\" ))","title":"Usage"},{"location":"#multiple-styles","text":"import com.github.ajalt.mordant.rendering.TextColors.* val t = Terminal () t . println ( \"${red(\" red \")} ${white(\" white \")} and ${blue(\" blue \")}\" )","title":"Multiple styles"},{"location":"#foreground-and-background-colors","text":"t . println (( yellow on brightGreen )( \"this is easy to read, right?\" ))","title":"Foreground and background colors"},{"location":"#background-color-alone","text":"t . println ( \"The foreground ${brightBlue.bg(\" color will stay the \")} same\" )","title":"Background color alone"},{"location":"#combine-styles-and-colors","text":"val style = ( bold + white + underline ) t . println ( style ( \"You can save styles\" )) t . println ( style ( \"to reuse\" ))","title":"Combine styles and colors"},{"location":"#nest-styles-and-colors","text":"t . println ( white ( \"You ${(blue on yellow)(\" can $ {( black + strikethrough )( \"nest\" )} styles \")} arbitrarily\" ))","title":"Nest styles and colors"},{"location":"#true-color-and-other-color-spaces","text":"import com.github.ajalt.mordant.rendering.TextColors.Companion.rgb t . println ( rgb ( \"#b4eeb4\" )( \"This will get downsampled on terminals that don't support truecolor\" ))","title":"True color and other color spaces"},{"location":"#terminal-color-support-detection","text":"By default, Terminal() will try to detect ANSI support in the current stdout stream. If you\u2019d like to override the detection, you can pass a specific value to the Terminal constructor. For example, to always output ANSI RGB color codes, even if stdout is currently directed to a file, you can do this: Terminal ( AnsiLevel . TRUECOLOR )","title":"Terminal color support detection"},{"location":"#tables","text":"Use the table DSL to quickly create tables. Mordant handles ANSI styles and wide characters like CJK and emoji. val t = Terminal () t . println ( table { header { row ( \"CJK\" , \"Emojis\" ) } body { row ( \"\ubaa8\u3139\ub2e8\u314c\" , \"\ud83d\ude4a\ud83d\ude49\ud83d\ude48\" ) } }) Mordant gives you lots of customization for your tables, including striped row styles, row and column spans, and different border styles. table { borderStyle = SQUARE_DOUBLE_SECTION_SEPARATOR align = RIGHT outerBorder = false column ( 0 ) { align = LEFT borders = ALL style = magenta } column ( 3 ) { borders = ALL style = magenta } header { style ( magenta , bold = true ) row ( \"\" , \"Projected Cost\" , \"Actual Cost\" , \"Difference\" ) } body { rowStyles ( blue , brightBlue ) borders = TOM_BOTTOM row ( \"Food\" , \"$400\" , \"$200\" , \"$200\" ) row ( \"Data\" , \"$100\" , \"$150\" , \"-$50\" ) row ( \"Rent\" , \"$800\" , \"$800\" , \"$0\" ) row ( \"Candles\" , \"$0\" , \"$3,600\" , \"-$3,600\" ) row ( \"Utility\" , \"$145\" , \"$150\" , \"-$5\" ) } footer { style ( bold = true ) row { cell ( \"Subtotal\" ) cell ( \"$-3,455\" ) { columnSpan = 3 } } } captionBottom ( \"Budget courtesy @dril\" , TextStyle ( dim = true )) }","title":"Tables"},{"location":"#markdown","text":"Mordant can render GitHub Flavored Markdown. Hyperlinks will even be clickable if you\u2019re on a terminal that supports it, like recent versions of iTerm or Windows Terminal. val t = Terminal () t . printMarkdown ( File ( \"README.md\" ). readText ())","title":"Markdown"},{"location":"#controlling-the-cursor","text":"You can show and hide the cursor, move it around, and clear parts of the screen with the cursor property on Terminal . If your terminal doesn\u2019t support cursor movements (like when output is redirected to a file) these commands are no-ops. val t = Terminal () t . cursor . move { up ( 3 ) startOfLine () clearScreenAfterCursor () } t . cursor . hide ( showOnExit = true )","title":"Controlling the cursor"},{"location":"#animations","text":"You can animate any widget like a table with Terminal.animation , or any regular string with Terminal.textAnimation . val t = Terminal() val a = t.textAnimation<Int> { frame -> (1..50).joinToString(\"\") { val hue = (frame + it) * 3 % 360 t.colors.hsv(hue, 100, 100)(\"\u2501\") } } t.cursor.hide(showOnExit = true) repeat(120) { a.update(it) Thread.sleep(25) }","title":"Animations"},{"location":"#progress-bars","text":"You can create customizable progress bars that automatically compute speed and time remaining. val t = Terminal () val progress = t . progressAnimation { text ( \"my-file.iso\" ) percentage () progressBar () completed () speed ( \"B/s\" ) timeRemaining () } The progressAnimation builder is currently JVM-only. On other platforms, you can still use t.animation { progressLayout { ... } } which will render the same widget, you\u2019ll just need to call progress.update manually. Call progress.start to animate the progress, and progress.update or progress.advance as your task completes.","title":"Progress bars"},{"location":"#installation","text":"Mordant is distributed through Maven Central. dependencies { implementation ( \"com.github.ajalt.mordant:mordant:2.0.0-beta2\" ) }","title":"Installation"},{"location":"#in-version-20-the-maven-coordinates-changed-make-sure-youre-using-the-new-coordinates-if-youre-updating-from-an-older-version","text":"","title":"In version 2.0, the maven coordinates changed. Make sure you're using the new coordinates if you're updating from an older version."},{"location":"#if-youre-using-maven-instead-of-gradle-use-artifactidmordant-jvmartifactid","text":"","title":"If you're using Maven instead of Gradle, use &lt;artifactId&gt;mordant-jvm&lt;/artifactId&gt;"},{"location":"changelog/","text":"2.0.0-beta2 \u00b6 2021-06-01 Added \u00b6 Published artifacts for macOS Changed \u00b6 Update Kotlin to 1.5.10 All text instances and print functions now default to preformatted whitespace, meaning that spaces and newlines will be preserved. You can explicitly pass Whitespace.NORMAL to restore the previous behavior. 2.0.0-beta1 \u00b6 2021-03-26 Added \u00b6 Table.contentToCsv to render a table\u2019s cells to csv format Added support for JavaScript and linux native targets Getter properties for standard theme styles Changed \u00b6 Update Kotlin to 1.4.31 Improve terminal capabilities detection 2.0.0-alpha2 \u00b6 2021-02-02 Added \u00b6 Terminal.progressAnimation builder to create a customizable progress bar animation Improved cursor APIs and added ability to produce cursor ANSI codes as a string Add ability to override detected terminal interactivity separately from the ANSI capabilities (#7) Changed \u00b6 Rework theming system to simplify customization 2.0.0-alpha1 \u00b6 2019-11-01 Mordant 2.0 is a rewrite that retains the simple APIs of Mordant 1.0, and adds support for rendering complex widgets. Added \u00b6 Added renderable widgets, including tables, panels, and lists Added markdown rendering Added a theme system to customize text styles on an entire terminal instance Added animations that automatically clear the previous frame when redrawing Changed \u00b6 Improved terminal capability detection ANSI colors and styles can now be applied through the TextColors and TextStyles top-level objects, and Terminal.print will downsample th resulting strings based on the detected terminal capabilities. 1.2.1 \u00b6 2019-03-17 Changed \u00b6 Improve support for color detection in IntelliJ and VS Code terminals 1.2.0 \u00b6 2018-08-19 Added \u00b6 Add functions for generating ANSI cursor movement Add ability to generate ANSI color codes from any colormath color object Update colormath to 1.2.0 1.1.0 \u00b6 2018-07-15 Added \u00b6 Add support for XYZ and LAB color spaces 1.0.0 \u00b6 2017-09-24 Initial Release","title":"Releases"},{"location":"changelog/#200-beta2","text":"2021-06-01","title":"2.0.0-beta2"},{"location":"changelog/#added","text":"Published artifacts for macOS","title":"Added"},{"location":"changelog/#changed","text":"Update Kotlin to 1.5.10 All text instances and print functions now default to preformatted whitespace, meaning that spaces and newlines will be preserved. You can explicitly pass Whitespace.NORMAL to restore the previous behavior.","title":"Changed"},{"location":"changelog/#200-beta1","text":"2021-03-26","title":"2.0.0-beta1"},{"location":"changelog/#added_1","text":"Table.contentToCsv to render a table\u2019s cells to csv format Added support for JavaScript and linux native targets Getter properties for standard theme styles","title":"Added"},{"location":"changelog/#changed_1","text":"Update Kotlin to 1.4.31 Improve terminal capabilities detection","title":"Changed"},{"location":"changelog/#200-alpha2","text":"2021-02-02","title":"2.0.0-alpha2"},{"location":"changelog/#added_2","text":"Terminal.progressAnimation builder to create a customizable progress bar animation Improved cursor APIs and added ability to produce cursor ANSI codes as a string Add ability to override detected terminal interactivity separately from the ANSI capabilities (#7)","title":"Added"},{"location":"changelog/#changed_2","text":"Rework theming system to simplify customization","title":"Changed"},{"location":"changelog/#200-alpha1","text":"2019-11-01 Mordant 2.0 is a rewrite that retains the simple APIs of Mordant 1.0, and adds support for rendering complex widgets.","title":"2.0.0-alpha1"},{"location":"changelog/#added_3","text":"Added renderable widgets, including tables, panels, and lists Added markdown rendering Added a theme system to customize text styles on an entire terminal instance Added animations that automatically clear the previous frame when redrawing","title":"Added"},{"location":"changelog/#changed_3","text":"Improved terminal capability detection ANSI colors and styles can now be applied through the TextColors and TextStyles top-level objects, and Terminal.print will downsample th resulting strings based on the detected terminal capabilities.","title":"Changed"},{"location":"changelog/#121","text":"2019-03-17","title":"1.2.1"},{"location":"changelog/#changed_4","text":"Improve support for color detection in IntelliJ and VS Code terminals","title":"Changed"},{"location":"changelog/#120","text":"2018-08-19","title":"1.2.0"},{"location":"changelog/#added_4","text":"Add functions for generating ANSI cursor movement Add ability to generate ANSI color codes from any colormath color object Update colormath to 1.2.0","title":"Added"},{"location":"changelog/#110","text":"2018-07-15","title":"1.1.0"},{"location":"changelog/#added_5","text":"Add support for XYZ and LAB color spaces","title":"Added"},{"location":"changelog/#100","text":"2017-09-24 Initial Release","title":"1.0.0"}]}